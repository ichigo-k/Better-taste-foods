
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AllowedUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AllowedUser
 * 
 */
export type AllowedUserModel = runtime.Types.Result.DefaultSelection<Prisma.$AllowedUserPayload>

export type AggregateAllowedUser = {
  _count: AllowedUserCountAggregateOutputType | null
  _avg: AllowedUserAvgAggregateOutputType | null
  _sum: AllowedUserSumAggregateOutputType | null
  _min: AllowedUserMinAggregateOutputType | null
  _max: AllowedUserMaxAggregateOutputType | null
}

export type AllowedUserAvgAggregateOutputType = {
  id: number | null
}

export type AllowedUserSumAggregateOutputType = {
  id: number | null
}

export type AllowedUserMinAggregateOutputType = {
  id: number | null
  name: string | null
  email: string | null
  createdAt: Date | null
}

export type AllowedUserMaxAggregateOutputType = {
  id: number | null
  name: string | null
  email: string | null
  createdAt: Date | null
}

export type AllowedUserCountAggregateOutputType = {
  id: number
  name: number
  email: number
  createdAt: number
  _all: number
}


export type AllowedUserAvgAggregateInputType = {
  id?: true
}

export type AllowedUserSumAggregateInputType = {
  id?: true
}

export type AllowedUserMinAggregateInputType = {
  id?: true
  name?: true
  email?: true
  createdAt?: true
}

export type AllowedUserMaxAggregateInputType = {
  id?: true
  name?: true
  email?: true
  createdAt?: true
}

export type AllowedUserCountAggregateInputType = {
  id?: true
  name?: true
  email?: true
  createdAt?: true
  _all?: true
}

export type AllowedUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AllowedUser to aggregate.
   */
  where?: Prisma.AllowedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AllowedUsers to fetch.
   */
  orderBy?: Prisma.AllowedUserOrderByWithRelationInput | Prisma.AllowedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AllowedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AllowedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AllowedUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AllowedUsers
  **/
  _count?: true | AllowedUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AllowedUserAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AllowedUserSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AllowedUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AllowedUserMaxAggregateInputType
}

export type GetAllowedUserAggregateType<T extends AllowedUserAggregateArgs> = {
      [P in keyof T & keyof AggregateAllowedUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAllowedUser[P]>
    : Prisma.GetScalarType<T[P], AggregateAllowedUser[P]>
}




export type AllowedUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AllowedUserWhereInput
  orderBy?: Prisma.AllowedUserOrderByWithAggregationInput | Prisma.AllowedUserOrderByWithAggregationInput[]
  by: Prisma.AllowedUserScalarFieldEnum[] | Prisma.AllowedUserScalarFieldEnum
  having?: Prisma.AllowedUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AllowedUserCountAggregateInputType | true
  _avg?: AllowedUserAvgAggregateInputType
  _sum?: AllowedUserSumAggregateInputType
  _min?: AllowedUserMinAggregateInputType
  _max?: AllowedUserMaxAggregateInputType
}

export type AllowedUserGroupByOutputType = {
  id: number
  name: string
  email: string
  createdAt: Date
  _count: AllowedUserCountAggregateOutputType | null
  _avg: AllowedUserAvgAggregateOutputType | null
  _sum: AllowedUserSumAggregateOutputType | null
  _min: AllowedUserMinAggregateOutputType | null
  _max: AllowedUserMaxAggregateOutputType | null
}

type GetAllowedUserGroupByPayload<T extends AllowedUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AllowedUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AllowedUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AllowedUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AllowedUserGroupByOutputType[P]>
      }
    >
  >



export type AllowedUserWhereInput = {
  AND?: Prisma.AllowedUserWhereInput | Prisma.AllowedUserWhereInput[]
  OR?: Prisma.AllowedUserWhereInput[]
  NOT?: Prisma.AllowedUserWhereInput | Prisma.AllowedUserWhereInput[]
  id?: Prisma.IntFilter<"AllowedUser"> | number
  name?: Prisma.StringFilter<"AllowedUser"> | string
  email?: Prisma.StringFilter<"AllowedUser"> | string
  createdAt?: Prisma.DateTimeFilter<"AllowedUser"> | Date | string
}

export type AllowedUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AllowedUserWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AllowedUserWhereInput | Prisma.AllowedUserWhereInput[]
  OR?: Prisma.AllowedUserWhereInput[]
  NOT?: Prisma.AllowedUserWhereInput | Prisma.AllowedUserWhereInput[]
  name?: Prisma.StringFilter<"AllowedUser"> | string
  email?: Prisma.StringFilter<"AllowedUser"> | string
  createdAt?: Prisma.DateTimeFilter<"AllowedUser"> | Date | string
}, "id">

export type AllowedUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AllowedUserCountOrderByAggregateInput
  _avg?: Prisma.AllowedUserAvgOrderByAggregateInput
  _max?: Prisma.AllowedUserMaxOrderByAggregateInput
  _min?: Prisma.AllowedUserMinOrderByAggregateInput
  _sum?: Prisma.AllowedUserSumOrderByAggregateInput
}

export type AllowedUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.AllowedUserScalarWhereWithAggregatesInput | Prisma.AllowedUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.AllowedUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AllowedUserScalarWhereWithAggregatesInput | Prisma.AllowedUserScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"AllowedUser"> | number
  name?: Prisma.StringWithAggregatesFilter<"AllowedUser"> | string
  email?: Prisma.StringWithAggregatesFilter<"AllowedUser"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AllowedUser"> | Date | string
}

export type AllowedUserCreateInput = {
  name: string
  email: string
  createdAt?: Date | string
}

export type AllowedUserUncheckedCreateInput = {
  id?: number
  name: string
  email: string
  createdAt?: Date | string
}

export type AllowedUserUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllowedUserUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllowedUserCreateManyInput = {
  id?: number
  name: string
  email: string
  createdAt?: Date | string
}

export type AllowedUserUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllowedUserUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AllowedUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AllowedUserAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type AllowedUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AllowedUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AllowedUserSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type AllowedUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["allowedUser"]>

export type AllowedUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["allowedUser"]>

export type AllowedUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["allowedUser"]>

export type AllowedUserSelectScalar = {
  id?: boolean
  name?: boolean
  email?: boolean
  createdAt?: boolean
}

export type AllowedUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "email" | "createdAt", ExtArgs["result"]["allowedUser"]>

export type $AllowedUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AllowedUser"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    email: string
    createdAt: Date
  }, ExtArgs["result"]["allowedUser"]>
  composites: {}
}

export type AllowedUserGetPayload<S extends boolean | null | undefined | AllowedUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload, S>

export type AllowedUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AllowedUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AllowedUserCountAggregateInputType | true
  }

export interface AllowedUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AllowedUser'], meta: { name: 'AllowedUser' } }
  /**
   * Find zero or one AllowedUser that matches the filter.
   * @param {AllowedUserFindUniqueArgs} args - Arguments to find a AllowedUser
   * @example
   * // Get one AllowedUser
   * const allowedUser = await prisma.allowedUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AllowedUserFindUniqueArgs>(args: Prisma.SelectSubset<T, AllowedUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AllowedUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AllowedUserFindUniqueOrThrowArgs} args - Arguments to find a AllowedUser
   * @example
   * // Get one AllowedUser
   * const allowedUser = await prisma.allowedUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AllowedUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AllowedUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AllowedUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllowedUserFindFirstArgs} args - Arguments to find a AllowedUser
   * @example
   * // Get one AllowedUser
   * const allowedUser = await prisma.allowedUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AllowedUserFindFirstArgs>(args?: Prisma.SelectSubset<T, AllowedUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AllowedUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllowedUserFindFirstOrThrowArgs} args - Arguments to find a AllowedUser
   * @example
   * // Get one AllowedUser
   * const allowedUser = await prisma.allowedUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AllowedUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AllowedUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AllowedUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllowedUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AllowedUsers
   * const allowedUsers = await prisma.allowedUser.findMany()
   * 
   * // Get first 10 AllowedUsers
   * const allowedUsers = await prisma.allowedUser.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const allowedUserWithIdOnly = await prisma.allowedUser.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AllowedUserFindManyArgs>(args?: Prisma.SelectSubset<T, AllowedUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AllowedUser.
   * @param {AllowedUserCreateArgs} args - Arguments to create a AllowedUser.
   * @example
   * // Create one AllowedUser
   * const AllowedUser = await prisma.allowedUser.create({
   *   data: {
   *     // ... data to create a AllowedUser
   *   }
   * })
   * 
   */
  create<T extends AllowedUserCreateArgs>(args: Prisma.SelectSubset<T, AllowedUserCreateArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AllowedUsers.
   * @param {AllowedUserCreateManyArgs} args - Arguments to create many AllowedUsers.
   * @example
   * // Create many AllowedUsers
   * const allowedUser = await prisma.allowedUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AllowedUserCreateManyArgs>(args?: Prisma.SelectSubset<T, AllowedUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AllowedUsers and returns the data saved in the database.
   * @param {AllowedUserCreateManyAndReturnArgs} args - Arguments to create many AllowedUsers.
   * @example
   * // Create many AllowedUsers
   * const allowedUser = await prisma.allowedUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AllowedUsers and only return the `id`
   * const allowedUserWithIdOnly = await prisma.allowedUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AllowedUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AllowedUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AllowedUser.
   * @param {AllowedUserDeleteArgs} args - Arguments to delete one AllowedUser.
   * @example
   * // Delete one AllowedUser
   * const AllowedUser = await prisma.allowedUser.delete({
   *   where: {
   *     // ... filter to delete one AllowedUser
   *   }
   * })
   * 
   */
  delete<T extends AllowedUserDeleteArgs>(args: Prisma.SelectSubset<T, AllowedUserDeleteArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AllowedUser.
   * @param {AllowedUserUpdateArgs} args - Arguments to update one AllowedUser.
   * @example
   * // Update one AllowedUser
   * const allowedUser = await prisma.allowedUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AllowedUserUpdateArgs>(args: Prisma.SelectSubset<T, AllowedUserUpdateArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AllowedUsers.
   * @param {AllowedUserDeleteManyArgs} args - Arguments to filter AllowedUsers to delete.
   * @example
   * // Delete a few AllowedUsers
   * const { count } = await prisma.allowedUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AllowedUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, AllowedUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AllowedUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllowedUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AllowedUsers
   * const allowedUser = await prisma.allowedUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AllowedUserUpdateManyArgs>(args: Prisma.SelectSubset<T, AllowedUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AllowedUsers and returns the data updated in the database.
   * @param {AllowedUserUpdateManyAndReturnArgs} args - Arguments to update many AllowedUsers.
   * @example
   * // Update many AllowedUsers
   * const allowedUser = await prisma.allowedUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AllowedUsers and only return the `id`
   * const allowedUserWithIdOnly = await prisma.allowedUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AllowedUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AllowedUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AllowedUser.
   * @param {AllowedUserUpsertArgs} args - Arguments to update or create a AllowedUser.
   * @example
   * // Update or create a AllowedUser
   * const allowedUser = await prisma.allowedUser.upsert({
   *   create: {
   *     // ... data to create a AllowedUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AllowedUser we want to update
   *   }
   * })
   */
  upsert<T extends AllowedUserUpsertArgs>(args: Prisma.SelectSubset<T, AllowedUserUpsertArgs<ExtArgs>>): Prisma.Prisma__AllowedUserClient<runtime.Types.Result.GetResult<Prisma.$AllowedUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AllowedUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllowedUserCountArgs} args - Arguments to filter AllowedUsers to count.
   * @example
   * // Count the number of AllowedUsers
   * const count = await prisma.allowedUser.count({
   *   where: {
   *     // ... the filter for the AllowedUsers we want to count
   *   }
   * })
  **/
  count<T extends AllowedUserCountArgs>(
    args?: Prisma.Subset<T, AllowedUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AllowedUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AllowedUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllowedUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AllowedUserAggregateArgs>(args: Prisma.Subset<T, AllowedUserAggregateArgs>): Prisma.PrismaPromise<GetAllowedUserAggregateType<T>>

  /**
   * Group by AllowedUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AllowedUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AllowedUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AllowedUserGroupByArgs['orderBy'] }
      : { orderBy?: AllowedUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AllowedUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllowedUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AllowedUser model
 */
readonly fields: AllowedUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AllowedUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AllowedUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AllowedUser model
 */
export interface AllowedUserFieldRefs {
  readonly id: Prisma.FieldRef<"AllowedUser", 'Int'>
  readonly name: Prisma.FieldRef<"AllowedUser", 'String'>
  readonly email: Prisma.FieldRef<"AllowedUser", 'String'>
  readonly createdAt: Prisma.FieldRef<"AllowedUser", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AllowedUser findUnique
 */
export type AllowedUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * Filter, which AllowedUser to fetch.
   */
  where: Prisma.AllowedUserWhereUniqueInput
}

/**
 * AllowedUser findUniqueOrThrow
 */
export type AllowedUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * Filter, which AllowedUser to fetch.
   */
  where: Prisma.AllowedUserWhereUniqueInput
}

/**
 * AllowedUser findFirst
 */
export type AllowedUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * Filter, which AllowedUser to fetch.
   */
  where?: Prisma.AllowedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AllowedUsers to fetch.
   */
  orderBy?: Prisma.AllowedUserOrderByWithRelationInput | Prisma.AllowedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AllowedUsers.
   */
  cursor?: Prisma.AllowedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AllowedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AllowedUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AllowedUsers.
   */
  distinct?: Prisma.AllowedUserScalarFieldEnum | Prisma.AllowedUserScalarFieldEnum[]
}

/**
 * AllowedUser findFirstOrThrow
 */
export type AllowedUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * Filter, which AllowedUser to fetch.
   */
  where?: Prisma.AllowedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AllowedUsers to fetch.
   */
  orderBy?: Prisma.AllowedUserOrderByWithRelationInput | Prisma.AllowedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AllowedUsers.
   */
  cursor?: Prisma.AllowedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AllowedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AllowedUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AllowedUsers.
   */
  distinct?: Prisma.AllowedUserScalarFieldEnum | Prisma.AllowedUserScalarFieldEnum[]
}

/**
 * AllowedUser findMany
 */
export type AllowedUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * Filter, which AllowedUsers to fetch.
   */
  where?: Prisma.AllowedUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AllowedUsers to fetch.
   */
  orderBy?: Prisma.AllowedUserOrderByWithRelationInput | Prisma.AllowedUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AllowedUsers.
   */
  cursor?: Prisma.AllowedUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AllowedUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AllowedUsers.
   */
  skip?: number
  distinct?: Prisma.AllowedUserScalarFieldEnum | Prisma.AllowedUserScalarFieldEnum[]
}

/**
 * AllowedUser create
 */
export type AllowedUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * The data needed to create a AllowedUser.
   */
  data: Prisma.XOR<Prisma.AllowedUserCreateInput, Prisma.AllowedUserUncheckedCreateInput>
}

/**
 * AllowedUser createMany
 */
export type AllowedUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AllowedUsers.
   */
  data: Prisma.AllowedUserCreateManyInput | Prisma.AllowedUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AllowedUser createManyAndReturn
 */
export type AllowedUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * The data used to create many AllowedUsers.
   */
  data: Prisma.AllowedUserCreateManyInput | Prisma.AllowedUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AllowedUser update
 */
export type AllowedUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * The data needed to update a AllowedUser.
   */
  data: Prisma.XOR<Prisma.AllowedUserUpdateInput, Prisma.AllowedUserUncheckedUpdateInput>
  /**
   * Choose, which AllowedUser to update.
   */
  where: Prisma.AllowedUserWhereUniqueInput
}

/**
 * AllowedUser updateMany
 */
export type AllowedUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AllowedUsers.
   */
  data: Prisma.XOR<Prisma.AllowedUserUpdateManyMutationInput, Prisma.AllowedUserUncheckedUpdateManyInput>
  /**
   * Filter which AllowedUsers to update
   */
  where?: Prisma.AllowedUserWhereInput
  /**
   * Limit how many AllowedUsers to update.
   */
  limit?: number
}

/**
 * AllowedUser updateManyAndReturn
 */
export type AllowedUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * The data used to update AllowedUsers.
   */
  data: Prisma.XOR<Prisma.AllowedUserUpdateManyMutationInput, Prisma.AllowedUserUncheckedUpdateManyInput>
  /**
   * Filter which AllowedUsers to update
   */
  where?: Prisma.AllowedUserWhereInput
  /**
   * Limit how many AllowedUsers to update.
   */
  limit?: number
}

/**
 * AllowedUser upsert
 */
export type AllowedUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * The filter to search for the AllowedUser to update in case it exists.
   */
  where: Prisma.AllowedUserWhereUniqueInput
  /**
   * In case the AllowedUser found by the `where` argument doesn't exist, create a new AllowedUser with this data.
   */
  create: Prisma.XOR<Prisma.AllowedUserCreateInput, Prisma.AllowedUserUncheckedCreateInput>
  /**
   * In case the AllowedUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AllowedUserUpdateInput, Prisma.AllowedUserUncheckedUpdateInput>
}

/**
 * AllowedUser delete
 */
export type AllowedUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
  /**
   * Filter which AllowedUser to delete.
   */
  where: Prisma.AllowedUserWhereUniqueInput
}

/**
 * AllowedUser deleteMany
 */
export type AllowedUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AllowedUsers to delete
   */
  where?: Prisma.AllowedUserWhereInput
  /**
   * Limit how many AllowedUsers to delete.
   */
  limit?: number
}

/**
 * AllowedUser without action
 */
export type AllowedUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AllowedUser
   */
  select?: Prisma.AllowedUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AllowedUser
   */
  omit?: Prisma.AllowedUserOmit<ExtArgs> | null
}
